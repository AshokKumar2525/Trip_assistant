name: PR Size Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  size-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check PR size
        id: size_check
        run: |
          git fetch origin ${{ github.base_ref }}

          # Count files changed
          FILES_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)
          echo "FILES_CHANGED=$FILES_CHANGED" >> $GITHUB_OUTPUT

          # Count lines added/removed
          LINES_STATS=$(git diff --shortstat origin/${{ github.base_ref }}...HEAD)
          LINES_ADDED=$(echo "$LINES_STATS" | grep -oE '[0-9]+ insertion' | grep -oE '[0-9]+' || echo "0")
          LINES_REMOVED=$(echo "$LINES_STATS" | grep -oE '[0-9]+ deletion' | grep -oE '[0-9]+' || echo "0")

          echo "LINES_ADDED=$LINES_ADDED" >> $GITHUB_OUTPUT
          echo "LINES_REMOVED=$LINES_REMOVED" >> $GITHUB_OUTPUT

          # Determine size category
          if [ "$FILES_CHANGED" -gt "30" ] || [ "$LINES_ADDED" -gt "1000" ]; then
            echo "SIZE_CATEGORY=xl" >> $GITHUB_OUTPUT
          elif [ "$FILES_CHANGED" -gt "20" ] || [ "$LINES_ADDED" -gt "500" ]; then
            echo "SIZE_CATEGORY=large" >> $GITHUB_OUTPUT
          elif [ "$FILES_CHANGED" -gt "10" ] || [ "$LINES_ADDED" -gt "250" ]; then
            echo "SIZE_CATEGORY=medium" >> $GITHUB_OUTPUT
          else
            echo "SIZE_CATEGORY=small" >> $GITHUB_OUTPUT
          fi

      - name: Post PR size status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const files_changed = "${{ steps.size_check.outputs.FILES_CHANGED }}";
            const lines_added = "${{ steps.size_check.outputs.LINES_ADDED }}";
            const lines_removed = "${{ steps.size_check.outputs.LINES_REMOVED }}";
            const size_category = "${{ steps.size_check.outputs.SIZE_CATEGORY }}";

            let size_emoji = '✅';
            let size_message = 'This PR is a good size for review.';
            let label = 'size/small';

            if (size_category === 'medium') {
              size_emoji = '⚠️';
              size_message = 'This PR is getting large. Consider breaking it down into smaller PRs if possible.';
              label = 'size/medium';
            } else if (size_category === 'large') {
              size_emoji = '⚠️';
              size_message = 'This is a large PR. Please consider breaking it down into smaller, more focused PRs.';
              label = 'size/large';
            } else if (size_category === 'xl') {
              size_emoji = '❌';
              size_message = 'This PR is very large! Large PRs are difficult to review thoroughly. Please split this into multiple smaller PRs if possible.';
              label = 'size/x-large';
            }

            const body = `## PR Size Analysis ${size_emoji}

            - **Files changed:** ${files_changed}
            - **Lines added:** ${lines_added}
            - **Lines removed:** ${lines_removed}

            ${size_message}

            > Smaller PRs are easier to review and have a higher chance of being merged quickly.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: [label]
            });
